/*
 * CanRecognition.cpp
 *
 *  Created on: 06/10/2013
 *      Author: rgap
 */

#include "CanRecognition.h"
#include "../globals.h"
#include "../OpOthers.h"

using namespace cv;

#define OPT_CLASSIFY 0

CanRecognition::CanRecognition() {
}

Rect *CanRecognition::getRectNearestCan() {
	return rectNearestCan;
}

void CanRecognition::shapeSegmentation(Mat& imgSegColor_Can,
		Mat& imgSegShape_Can, Mat &world, Mat &imgMaxDepth,
		Mat &imgBGR_cansDetected, int minArea, int maxArea,
		float minApCuadrado, float maxApCuadrado) {

	vector<vector<Point> > contours;
		vector<Vec4i> hierarchy;

	can_found = 0;

	imgTemp = imgSegColor_Can.clone();
	findContours(imgTemp, contours, hierarchy, CV_RETR_TREE,
			CV_CHAIN_APPROX_SIMPLE, Point(0, 0));

	vector<Rect> boundRect(contours.size());
	/////////////////////////////////////////////////////////////// MOMENTS
	unsigned int i;

	///////////////////////////////////////////////////////////////////////
	// draw contours
	for (i = 0; i < contours.size(); i++) {
		boundRect[i] = boundingRect(Mat(contours[i]));
	}

	// get nearest can
	int area;
	float apCuadrado;
	Point pTL, pLR;
	float marginBoundingBox_w = 0.9, marginBoundingBox_h = 0.7;

	rectNearestCan = new Rect(-1, -1, -1, -1);
	for (i = 0; i < contours.size(); i++) {
		area = contourArea(contours[i]); //area
		apCuadrado = (boundRect[i].height + boundRect[i].width) * 1.0 / (2.0
				* max(boundRect[i].height, boundRect[i].width));

		if (area >= minArea && area <= maxArea && apCuadrado >= minApCuadrado
				&& apCuadrado <= maxApCuadrado) {
			drawContours(imgBGR_cansDetected, contours, i, Scalar(0, 0, 255),
					1, 8, vector<Vec4i> (), 0, Point());
			pTL = boundRect[i].tl() - Point(
					marginBoundingBox_w * boundRect[i].width,
					marginBoundingBox_h * boundRect[i].height);
			pLR = boundRect[i].br() + Point(
					marginBoundingBox_w * boundRect[i].width,
					marginBoundingBox_h * boundRect[i].height);

			if (pTL.x < 0)
				pTL.x = 0;
			if (pTL.y < 0)
				pTL.y = 0;
			if (pLR.x > imgBGR_cansDetected.cols)
				pLR.x = imgBGR_cansDetected.cols;
			if (pLR.y > imgBGR_cansDetected.rows)
				pLR.y = imgBGR_cansDetected.rows;

			rectangle(imgBGR_cansDetected, pTL, pLR, Scalar(0, 255, 0), 2, 8, 0);
			rectangle(imgSegShape_Can, boundRect[i].tl(), boundRect[i].br(),
					CV_RGB(255, 255, 255), -1);

			if (boundRect[i].br().y > rectNearestCan->br().y) {
				(*rectNearestCan) = boundRect[i];
			}
			can_found = 1;
		}
	}
	if(can_found == 1){
		circle(
				imgBGR_cansDetected,
				Point((int) (rectNearestCan->tl().x + rectNearestCan->br().x) / 2,
						(int) (rectNearestCan->tl().y + rectNearestCan->br().y) / 2),
				20, Scalar(0, 0, 255), -1, 8, 0);
	}
	contours.clear();
	hierarchy.clear();

	//line(imgBGR_cansDetected, Point(imgBGR_cansDetected.cols / 2, 0),
	//		Point(imgBGR_cansDetected.cols / 2, imgBGR_cansDetected.rows),
	//		Scalar(255, 0, 0), 2, 8);

}

void CanRecognition::segmentation_HSV(Mat &imgRGB, Mat &imgThreshold, int minH,
		int maxH, int minS, int maxS, int minV, int maxV) {
	cvtColor(imgRGB, imgHSV, CV_BGR2HSV);
	int i, j;
	for (i = 0; i < imgRGB.rows; i++) {
		uchar*imgCONV_pt = imgHSV.ptr<uchar> (i);
		uchar*imgTemp_pt = imgThreshold.ptr<uchar> (i);
		for (j = 0; j < imgRGB.cols; j++) {
			if (imgCONV_pt[3 * j + 0] >= minH && imgCONV_pt[3 * j + 0] <= maxH
					&& imgCONV_pt[3 * j + 1] >= minS && imgCONV_pt[3 * j + 1]
					<= maxS && imgCONV_pt[3 * j + 2] >= minV && imgCONV_pt[3
					* j + 2] <= maxV) {
				imgTemp_pt[j] = 255;
				imgTemp_pt[j] = 255;
				imgTemp_pt[j] = 255;
			} else {
				imgTemp_pt[j] = 0;
				imgTemp_pt[j] = 0;
				imgTemp_pt[j] = 0;
			}
		}
	}
}

CanRecognition::~CanRecognition() {
}

