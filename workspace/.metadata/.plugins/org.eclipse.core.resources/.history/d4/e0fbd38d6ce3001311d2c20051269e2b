#include <opencv2/opencv.hpp>

#include <stdio.h>
#include <string.h>
#include <unistd.h>
#include <SerialStream.h>
#include <iostream>

#include "globals.h"
#include "typedefs.h"

#include "Capture/DeviceCapture.h"
#include "RobotPlanning/RobotFSM.h"
#include "RobotVision.h"
#include "ModelParameters.h"

using namespace cv;
using namespace std;

//////////////////////////////// OPTIONS
#define COLLECT_CANS 1
#define MOVE_KINECT 1

//////////////////////////////// GUI
ModelParameters* P = new ModelParameters();

//////////////////////////////// DOC
#define showFrame(namewindow, path, img) \
	if(showFrame) imshow(namewindow, img); if(save) imwrite(path, img);

#define keyboardActions(k) \
		if (save) save = 0;\
		if (k == 'q') save = 1;\
		else if (k == 'w') showFrame = !showFrame;\
		else if (k == ' ') break;

void initCallbacks() {
	namedWindow("PARAMS_CAN");
	createTrackbar("distanceCollectCan", "PARAMS_CAN", &P->distanceCollectCan,
			480, NULL, NULL);
	createTrackbar("minH_can", "PARAMS_CAN", &P->minH_can, 255, NULL, NULL);
	createTrackbar("maxH_can", "PARAMS_CAN", &P->maxH_can, 255, NULL, NULL);
	createTrackbar("minS_can", "PARAMS_CAN", &P->minS_can, 255, NULL, NULL);
	createTrackbar("maxS_can", "PARAMS_CAN", &P->maxS_can, 255, NULL, NULL);
	createTrackbar("minV_can", "PARAMS_CAN", &P->minV_can, 255, NULL, NULL);
	createTrackbar("maxV_can", "PARAMS_CAN", &P->maxV_can, 255, NULL, NULL);
	createTrackbar("blurSize", "PARAMS_CAN", &P->blurSize, 51, NULL, NULL);
	createTrackbar("minArea", "PARAMS_CAN", &P->minArea, 50000, NULL, NULL);
	createTrackbar("maxArea", "PARAMS_CAN", &P->maxArea, 50000, NULL, NULL);
	createTrackbar("minApCuadrado", "PARAMS_CAN", &P->minApCuadrado_pos, 10,
			NULL, NULL);
	createTrackbar("maxApCuadrado", "PARAMS_CAN", &P->maxApCuadrado_pos, 10,
			NULL, NULL);
}

/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////

void frameLoop() {
	DeviceCapture device(1);

	RobotVision vision;
	RobotFSM robot;
	robot.initializeDevice("/dev/ttyACM0"); // arduino
	robot.setParameters(P);

	vision.initializeVision(device.szFrame);
	vision.setParameters(P);
	initCallbacks();

	Rect * rectNearestObstacle;

	int k, save = 0, showFrame = 1;
	while (1) {

		//if (robot.hasPendantAction()) {
		//	continue;
		//}

		//device.verifyState();
		P->updateParameters();

		vision.imgBGR = device.getBGRFrame();
		showFrame("imgBGR", "TESTS/1_imgBGR.png", vision.imgBGR);

		vision.applyGaussBlur(vision.imgBGR, vision.imgBGR_Blur);
		showFrame("imgBGR_Blur", "TESTS/1_imgBGR_Blur.png", vision.imgBGR_Blur);

		vision.applyColorSegmentation_HSV(vision.imgBGR_Blur,
				vision.imgSegColor_Can);
		showFrame("can_HSV", "TESTS/1_imgSegColor_Can.png", vision.imgSegColor_Can);

		vision.applyShapeSegmentation(vision.imgSegColor_Can,
				vision.imgSegShape_Can);
		showFrame("imgSegShape_Can", "TESTS/1_imgSegShape_Can.png", vision.imgSegShape_Can);
		showFrame("imgBGR_cans_detected", "TESTS/1_imgBGR_cans_detected.png", vision.imgBGR);

		{
			robot.planWithEnvironment(vision.getRectNearestCan(),
					rectNearestObstacle, vision.imgBGR);
		}

		k = cv::waitKey(10);
		keyboardActions(k);
	}
}

int main() {
	frameLoop();
}
