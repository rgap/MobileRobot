#include <iostream>
#include <pcl/io/pcd_io.h>
#include <pcl/point_types.h>
#include <pcl/console/parse.h>
#include <boost/thread/thread.hpp>
#include <pcl/filters/extract_indices.h>
#include <pcl/sample_consensus/ransac.h>
#include <pcl/visualization/pcl_visualizer.h>  // deprecated, treba nahradit
#include <pcl/sample_consensus/sac_model_plane.h>
#include <pcl/sample_consensus/sac_model_sphere.h>
#include <pcl/filters/voxel_grid.h>
#include <pcl/segmentation/extract_clusters.h>

using namespace std;

int main(int argc, char** argv) {

	/*
	 if (argc < 2) {
	 cout << "Not enough parameters";
	 return 0;
	 }
	 */

	pcl::PCDReader reader;
	pcl::PointCloud<pcl::PointXYZ>::Ptr cloud(
			new pcl::PointCloud<pcl::PointXYZ>), cloud_f(
			new pcl::PointCloud<pcl::PointXYZ>);

	reader.read(
			"/home/rgap/REPOSITORIES/MobileRobot/bin/clusters_kdtree/cloud_cluster_4.pcd",
			*cloud);
	cout << "PointCloud before filtering has: " << cloud->points.size()
			<< " data points." << endl;

	/* Cloud Downsampling - Voxel */
	pcl::VoxelGrid<pcl::PointXYZ> vg;
	vg.setInputCloud(cloud);
	vg.setLeafSize(0.01f, 0.01f, 0.01f);
	vg.filter(*cloud);
	cout << "PointCloud after filtering has: " << cloud->points.size()
			<< " data points." << endl;

	////////////////////////////////////////////////////////////

	/* Clustering */

	pcl::search::KdTree<pcl::PointXYZ>::Ptr tree(
			new pcl::search::KdTree<pcl::PointXYZ>);
	tree->setInputCloud(cloud);

	vector<pcl::PointIndices> cluster_indices;
	pcl::EuclideanClusterExtraction<pcl::PointXYZ> ec;
	ec.setClusterTolerance(0.02); // 2cm
	ec.setMinClusterSize(100);
	ec.setMaxClusterSize(25000);
	ec.setSearchMethod(tree);
	ec.setInputCloud(cloud);
	ec.extract(cluster_indices);

	cout << "# Clusters : " << cluster_indices.size() << endl;

	pcl::PCDWriter writer;
	int i = 0;
	for (vector<pcl::PointIndices>::const_iterator it = cluster_indices.begin(); it
			!= cluster_indices.end(); ++it) {
		pcl::PointCloud<pcl::PointXYZ>::Ptr cloud_cluster(
				new pcl::PointCloud<pcl::PointXYZ>);
		for (vector<int>::const_iterator pit = it->indices.begin(); pit
				!= it->indices.end(); pit++)
			cloud_cluster->points.push_back(cloud->points[*pit]);
		cloud_cluster->width = cloud_cluster->points.size();
		cloud_cluster->height = 1;
		cloud_cluster->is_dense = true;

		cout << "PointCloud representing the Cluster #" << i << " with "
				<< cloud_cluster->points.size() << " data points." << endl;
		stringstream ss;
		ss << "cloud_cluster_" << i << ".pcd";
		writer.write<pcl::PointXYZ> (ss.str(), *cloud_cluster, false);
		i++;

		/* Surface Reconstruction  */
	}

	return (0);
}

